*bexec.txt*      Buffer execute and grab output      Last Change: 30 Jan 2007

Buffer Execute (v0.2)                                *buffer-execute* *bexec*

The Bexec plugin allows the user to execute the current buffer if it
contains a script with a shebang (#!/path/to/interpreter) on the first line.
The output of the script will be grabbed and displayed in a separate buffer.
It can be used to execute, for instance, Shell, PHP, PERL, Python or SQL
scripts from within Vim.

|bexec-usage|         Usage
|bexec-install|       Installation
|bexec-settings|      Settings
|bexec-customizing|   Customizing
|bexec-tips|          Tips
|bexec-misc|          Various things

This plugin is only available if 'compatible' is not set.

=============================================================================
USAGE                                                           *bexec-usage*

To execute the script in the current buffer, use: >
 \bx   or   :Bexec
To execute the currently highlighted text using the current buffer's
shebang, use: >
 \bx   or   :BexecVisual

Note: If you've changed your 'mapleader' variable, you'll have to use that 
instead if '\'. 

The script in the current buffer will be executed if it has a shebang
(#!/path/to/interpreter) on the first line. If the type of the file is known
by Bexec, it will try to run a default interpreter for the script. Custom
filters can be defined in the bexec.vim file to avoid having to write a
shell script wrapper for certain tasks. See |bexec-customizing|.

If the script is not yet saved, or if you are trying to execute only a
visually selected piece of script, Bexec will save the buffer or selection
to a temporary file and execute it from there.

Bexec will grab the scripts output and put it in a seperate buffer. If the
output buffer doesn't exist yet, Bexec will create one for you. If a window
displaying the buffer is not yet open, Bexec will split the current window
and set it to display the output buffer. 

If you want to map the :Bexec calls to another key, let's say <F5>, put
something like this in your ~/.vimrc: >

    nmap <silent> <unique> <F5> :call Bexec()<CR>
    vmap <silent> <unique> <F5> :call BexecVisual()<CR>

=============================================================================
INSTALLATION                                                  *bexec-install*

Bexec is distributed as a |Vimball|. To install it, just edit the
bexec-vX.Y.vba script in Vim and run the following command: >

    :so %

You can now pull up the Bexec help using >
    
    :help bexec

=============================================================================
SETTINGS                                                     *bexec-settings*

Bexec's behaviour can be customized using a number of settings. You can
change these settings using the |let| command: >

  :let settingname=value

Bexec offers the following settings:

                                                              *g:bexec_args*
To pass arguments to the script you're executing: >
  
  :let bexec_args="arg1 arg2 'arg 3'"

You can also redirect input if you wish: >

  :let bexec_args="-sort < mybooks.txt"

                                                           *g:bexec_argsbuf*
To have Bexec read the argument from an open buffer, put the arguments on the
first line of the buffer and: >

  :let bexec_argsbuf=[buffer number]

                                                          *g:bexec_splitdir*
To control the way Bexec splits the current window to create the output
window, you can modify the bexec_splitdir setting: >

  :let bexec_splitdir=[direction]

[direction] can be "hor" for horizontal or "ver" for vertical splitting.
The default is horizontal splitting.

                                                        *g:bexec_outputmode*
To control what Bexec does with the output of a script: >

  :let bexec_outputmode=[outputmode]

[outputmode] can be "replace" (default) to clear the output buffer before
each script execution. Use a value of "append" to append the output of the
script to the output buffer. Bexec will insert a separator line between
outputs.


                                                       *g:bexec_rehighlight*
If you want Bexec to re-highlight a visual selection after calling
:BexecVisual, set the following option to 1: >

  :let bexec_rehighlight=[1|0]

                                                      *g:bexec_outputscroll*
To change the way Bexec scrolls the output buffer window after execution:

  :let bexec_outputscroll=[1|0]

Turning this option on ('1') (default) will make Bexec scroll the output
list to the bottom of the output. If the option is off, Bexec will scroll
the top of the output to the top of the window.

=============================================================================
CUSTOMIZING                                               *bexec-customizing*

Aside from the settings, there are a couple of things you can do to customize
Bexec. If the current file you're editing doesn't have a shebang, or if the
interpreter for the filetype doesn't understand a shebang, you can do one of
three things:

1. Write a shell script wrapper that'll execute the script for you. For some
   examples, see the |bexec-tips| section. Then put that as the path to your
   interpreter in the shebang.

2. Add the interpreter to the list of interpreters Bexec knows about. You 
   can do this from your ~/.vimrc by defining the g:bexec_script_types 
   variable like so: >

    let g:bexec_script_types = ['pike', 'tclsh']

   This will add the pike and tclsh interpreter to the list of known 
   interpreters. There is no need to give the full path to the interpreters,
   just give the name of the executable. It has to be in your path though.

3. Add a custom filter for your script type. Custom filters can be defined
   in your ~/.vimrc by defining the g:bexec_script_types variable like so: >

    let g:bexec_filter_types = {
        \ 'html' : 'links -dump',
        \ }

   To make the Links textbrowser your default filter for files of the 
   html type.
     
=============================================================================
TIPS                                                             *bexec-tips*

You can use Bexec as a crude database front-end! Create an shell script that
runs SQL commands from a file using a commandline client. For instance, for
MySQL: /home/todsah/mysql_exec.sh >

  #!/bin/sh

  USERNAME='john'
  PASSWORD='secret'
  HOSTNAME='localhost'
  DATABASE='cms'

  mysql -t -u$USERNAME -p$PASSWORD -h$HOSTNAME $DATABASE < $1

Then, edit a file with a .sql extension (so you get syntax highlighting).
For example: >

  #!/home/todsah/mysql_exec.sh

  SELECT id, page_name FROM pages WHERE page_name LIKE 'Test%';

It will output something like:

  +----+-----------+
  | id | page_name |
  +----+-----------+
  |  1 | Test      | 
  +----+-----------+
  |  2 | Testing   | 
  +----+-----------+

It's not much better than a normal commandline database frontend, but at least
you get:

 * SQL syntax color highlighting
 * Easier editing than most database commandline clients.  
 * Execution of a just couple of lines of the script (Use visual mode select
   and BexecVisual)
 * Split screen SQL editing and execution.

Here's one for Sqlite3: >

  #!/bin/sh
  
  DBFILE="/var/www/dev/data/database"
  
  grep -v "^#" $1 | sqlite3 -header -column $DBFILE 

Output looks like:

  hostname             username    username    fullname     
  -------------------  ----------  ----------  -------------
  localhost.localhost  todsah      todsah      Ferry Boender
  localhost.localhost  todsah      todsah      Ferry Boender

=============================================================================
MISC                                                             *bexec-misc*

Changelog

    v0.2
        
        - Removed the <F5> keybindings. Added <leader>bx instead.
        - Added custom filters (Patch by Alexandru Ungur).
        - Improved 'known interpreters' configuring (Patch by Alexandru
          Ungur).

    v0.1
        
        Initial version

Credits:

    Many thanks to the following (groups of) people:

        - The people of #vim on the FreeNode IRC network.
        - Alexandru E. Ungur for various suggestions and patches. 
        - Michiel 'Mafkees' van Baak for beta testing.
        - Steven Looman for various suggestions.
        - Bram Moolenaar for, well, you know.

